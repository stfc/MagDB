#!/usr/bin/env python2.6
# -*- coding=utf-8 -*-
import argparse
import sys
import nis
import getpass
import time
import logging
import ConfigParser

from sqlalchemy import *
from sqlalchemy.exc import IntegrityError
from magdb import CS, DEFAULT_DOMAIN

# Some globals to get started
global session
global metadata
global view
global tables
global hostnames


def sleep(n):
    for i in range(0, n):
        sys.stdout.write("%d..." % (n - i))
        sys.stdout.flush()
        time.sleep(1)
    print "0"


def printException():
    logger = logging.getLogger("magdb")

    logger.error('Caught Exception:')
    if sys.exc_info():
        e = str(sys.exc_info()[1]).splitlines()
        for l in e:
            if "INSERT" not in l and "DELETE" not in l:
                logger.error("  %s" % l)


def setup():
    from sqlalchemy import create_engine
    engine = create_engine(CS, echo=False)

    metadata = MetaData()
    metadata.reflect(bind=engine)

    view = Table("vNetwork2", metadata, Column("systemId", Integer), Column("macAddress", Integer), Column("ipAddress", Integer, primary_key=True),Column("fqdn", Integer) , autoload_with=engine)
    view_aliases = Table("vAliases", metadata, Column("hostnameId", Integer, primary_key=True), Column("aliasId", Integer, primary_key=True), Column("alias", String), Column("aliasDomian", String),Column("host", String),Column("hostDomain", String), autoload_with=engine)

    from sqlalchemy.orm import sessionmaker
    Session = sessionmaker(bind=engine)

    session = Session()

    return (session, metadata,view, view_aliases)


def get_hostname(new_hostname):
    logger = logging.getLogger("magdb")

    h_list = new_hostname.split('.',1)
    if len(h_list) == 1:
        logger.error('Please type full NEW hostname [name.domain]')
        sys.exit(3)
    else:
        d = session.query(tables["domains"]).filter(tables["domains"].columns["domainName"] == h_list[1]).first()
        if not d:
            logger.error("Domain %s does not exist" % h_list[1])
            sys.exit(3)
        else:
            h = session.query(view).filter(view.columns["fqdn"] == h_list[0] + '.' + h_list[1]).first()
            if h:
                logger.error("Hostname: %s already exists" % new_hostname)
                return sys.exit(3)
            else:
                return(h_list[0],d.id)


def info_host(target):
    logger = logging.getLogger("magdb")

    h_list = target.split('.',1)
    if len(h_list) == 1:
        h_list.append(DEFAULT_DOMAIN)

    try:
        vn = session.query(view).filter(view.columns["fqdn"] == h_list[0] + '.' + h_list[1]).first()
        if vn:
            logger.info("%10s%20s%20s%30s" % vn)
            hostname = session.query(tables["hostnames"]).filter(tables["domains"].columns["id"] == tables["hostnames"].columns["domainId"]).filter(tables["domains"].columns["domainName"]==h_list[1]).filter(tables["hostnames"].columns["name"] == h_list[0]).first()
            aliases = session.query(view_aliases).filter(view_aliases.columns["hostnameId"] == hostname.id).all()
            if aliases:
                for a in aliases:
                    logger.info("Alias: %s.%s" % (a.alias, a.aliasDomian))
        else:
            logger.error("Host not found")
    except:
        printException()
        sys.exit(3)


def info_alias(target):
    logger = logging.getLogger("magdb")

    h_list = target.split('.',1)
    if len(h_list) == 1:
        h_list.append()
    try:
        alias = session.query(view_aliases).filter(view_aliases.columns["alias"] == h_list[0]).filter(view_aliases.columns["aliasDomian"] == h_list[1]).first()
        logger.info("Hostname: %s.%s" % (alias.host, alias.hostDomain))
    except:
        printException()
        sys.exit(3)


def info_ip(target):
    logger = logging.getLogger("magdb")

    try:
        vn = session.query(view).filter(view.columns["ipAddress"] == target).all()
        if vn != None:
            for v in vn:
                logger.info("\t%s\t%s\t%s\t%s" % v)
        else:
            logger.error("IP not found")
    except:
        printException()
        sys.exit(3)


def update_host(host, new_hostname):
    logger = logging.getLogger("magdb")

    h_list = host.split('.',1)
    if len(h_list) == 1:
        h_list.append(DEFAULT_DOMAIN)

    old_hostname = session.query(tables["hostnames"]).filter(tables["domains"].columns["id"] == tables["hostnames"].columns["domainId"]).filter(tables["domains"].columns["domainName"]==h_list[1]).filter(tables["hostnames"].columns["name"] == h_list[0]).first()
    logger.info("Old hostname %s in domain %s" % (h_list[0], old_hostname.domainId))

    if not old_hostname:
        printException()
        sys.exit(3)

    (new_name, domain_id) = get_hostname(new_hostname)

    logger.info("New hostname %s in domain %s" % (new_name, domain_id))

    update_stmt = update(tables["hostnames"],tables["hostnames"].columns["id"]==old_hostname.id, values={
        tables["hostnames"].columns["name"] : new_name,
        tables["hostnames"].columns["domainId"] : domain_id,
        tables["hostnames"].columns["lastUpdatedBy"] : user_name
    })

    try:
        session.execute(update_stmt)
        session.commit()
        logger.info("Host updated")
    except:
        session.rollback()
        printException()
        sys.exit(3)


def update_ip(ip, new_ip):
    logger = logging.getLogger("magdb")

    try:
        old_host_address = session.query(tables["hostAddresses"]).filter(tables["hostAddresses"].columns["ipAddress"] == ip).first()
        if not old_host_address:
            logger.error('Specified IP does not exist')
            sys.exit(3)
    except:
        printException()
        sys.exit(3)

    try:
        update_stmt = update(tables["hostAddresses"],tables["hostAddresses"].columns["id"]==old_host_address.id, values={
            tables["hostAddresses"].columns["ipAddress"] : new_ip,
            tables["hostAddresses"].columns["lastUpdatedBy"] : user_name
        })
        session.execute(update_stmt)
        session.commit()
        logger.info("IP updated")
    except:
        session.rollback()
        printException()
        sys.exit(3)


def add_ip(ip, mac):
    logger = logging.getLogger("magdb")

    try:
        network_inter = session.query(tables["networkInterfaces"]).filter(tables["networkInterfaces"].columns["macAddress"] == mac.lower()).first()
        if not network_inter:
            logger.error('Specified mac address does not exist')
            sys.exit(3)
    except:
        printException()
        sys.exit(3)

    try:
        insert_stmt = insert(tables["hostAddresses"],values={
            tables["hostAddresses"].columns["ipAddress"] : ip,
            tables["hostAddresses"].columns["networkInterfaceId"] : network_inter.id,
            tables["hostAddresses"].columns["lastUpdatedBy"] : user_name
        })
        session.execute(insert_stmt)
        session.commit()
        logger.info("IP Added")
    except:
        session.rollback()
        printException()
        sys.exit(3)


def add_host(host, ip):
    logger = logging.getLogger("magdb")

    try:
        host_address = session.query(tables["hostAddresses"]).filter(tables["hostAddresses"].columns["ipAddress"] == ip).first()
        if not host_address:
            logger.error('Specified ip address does not exist')
            sys.exit(3)
    except:
        printException()
        sys.exit(3)

    h_list = host.split('.',1)
    if len(h_list) == 1:
        logger.error('Wrong hostname name.domain')
        sys.exit(3)

    d = session.query(tables["domains"]).filter(tables["domains"].columns["domainName"] == h_list[1]).first()
    if not d:
        logger.error("Domain %s does not exist" % h_list[1])
        sys.exit(3)

    try:
        insert_stmt = insert(tables["hostnames"],values={
            tables["hostnames"].columns["name"] : h_list[0],
            tables["hostnames"].columns["hostAddressId"] : host_address.id,
            tables["hostnames"].columns["domainId"] : d.id,
            tables["hostnames"].columns["lastUpdatedBy"] : user_name
        })
        session.execute(insert_stmt)
        session.commit()
        logger.info("Host added")
    except:
        session.rollback()
        printException()
        sys.exit(3)


def add_stub(ip, host):
    logger = logging.getLogger("magdb")

    logger.warning("You are about to add a stub record and intentionally violate the referential integrity of MagDB, you should know why you are doing this, if not hit Ctrl+C now.")
    sleep(5)

    h_list = host.split('.',1)
    try:
        insert_stmt = insert(tables["hostAddresses"],values={
            tables["hostAddresses"].columns["ipAddress"] : ip,
            tables["hostAddresses"].columns["lastUpdatedBy"] : user_name
        })
        ip_id = session.execute(insert_stmt).inserted_primary_key[0]

        if ip_id:
            d = session.query(tables["domains"]).filter(tables["domains"].columns["domainName"] == h_list[1]).first()
            if d:
                insert_stmt = insert(tables["hostnames"],values={
                    tables["hostnames"].columns["name"] : h_list[0],
                    tables["hostnames"].columns["hostAddressId"] : ip_id,
                    tables["hostnames"].columns["domainId"] : d.id,
                    tables["hostnames"].columns["lastUpdatedBy"] : user_name
                })
                session.execute(insert_stmt)
                session.commit()
                logger.info("Stub record added")
            else:
                logger.error("Domain %s does not exist" % h_list[1])
                session.rollback()
        else:
            logger.error("Failed to add IP")
            session.rollback()
    except:
        session.rollback()
        printException()
        sys.exit(3)


def add_alias(alias, host):
    logger = logging.getLogger("magdb")
    user_name = getpass.getuser()
    if user_name.lower() == "root":
        logger.error("This script may not be run as the root user")
        sys.exit(3)


    h_list = host.split('.',1)
    if len(h_list) == 1:
        h_list.append(DEFAULT_DOMAIN)

    hostname = session.query(tables["hostnames"]).filter(tables["domains"].columns["id"] == tables["hostnames"].columns["domainId"]).filter(tables["domains"].columns["domainName"]==h_list[1]).filter(tables["hostnames"].columns["name"] == h_list[0]).first()
    if not hostname:
        logger.error('Specified hostname does not exist')
        sys.exit(3)

    a_list = alias.split('.',1)
    if len(a_list) == 1:
        logger.error('Wrong alias name name.domain')
        sys.exit(3)

    d = session.query(tables["domains"]).filter(tables["domains"].columns["domainName"] == a_list[1]).first()
    if not d:
        logger.error("Domain %s does not exist" % h_list[1])
        sys.exit(3)

    try:
        insert_stmt = insert(tables["aliases"],values={
            tables["aliases"].columns["name"] : a_list[0],
            tables["aliases"].columns["domainId"] : d.id,
            tables["hostnames"].columns["lastUpdatedBy"] : user_name
        })
        session.execute(insert_stmt)
        session.commit()

        new_alias = session.query(tables['aliases']).filter(tables['aliases'].columns['domainId'] == d.id).filter(tables['aliases'].columns['name'] == a_list[0] ).first()

        insert_stmt = insert(tables["hostnamesAliases"],values={
            tables["hostnamesAliases"].columns["hostnameId"] : hostname.id,
            tables["hostnamesAliases"].columns["aliasId"] : new_alias.id,
            tables["hostnames"].columns["lastUpdatedBy"] : user_name
        })
        session.execute(insert_stmt)
        session.commit()
        logger.info("Alias added")
    except:
        session.rollback()
        printException()
        sys.exit(3)


def add_interface(mac, name, system):
    logger = logging.getLogger("magdb")

    try:
        t = tables["networkInterfaces"]
        v = {
            t.columns["lastUpdatedBy"] : user_name,
            t.columns["macAddress"] : mac,
            t.columns["name"] : name,
            t.columns["systemId"] : system,
        }
        insert_stmt = insert(t, values=v)
        session.execute(insert_stmt)
        session.commit()
        logger.info("Interface added")
    except IntegrityError:
        session.rollback()
        print_exception()
        sys.exit(3)


def remove_host(target, cascade):
    logger = logging.getLogger("magdb")

    if target:
        h_list = target.split('.',1)
        if len(h_list) == 1:
            h_list.append(DEFAULT_DOMAIN)

        old_hostname = session.query(tables["hostnames"]).filter(tables["domains"].columns["id"] == tables["hostnames"].columns["domainId"]).filter(tables["domains"].columns["domainName"]==h_list[1]).filter(tables["hostnames"].columns["name"] == h_list[0]).first()

        if old_hostname:
            aliases = session.query(view_aliases).filter(view_aliases.columns["hostnameId"] == old_hostname.id).all()
            logger.info("Removing hostname %d" % old_hostname.id)
            if aliases:
                logger.info("Hostname has aliases %s" % aliases)
            if not aliases or (aliases and cascade):
                try:
                    delete_stmt = delete(tables["hostnames"],tables["hostnames"].columns["id"]==old_hostname.id)
                    rowcount = session.execute(delete_stmt).rowcount
                    session.commit()
                    logger.info('Hostname removed, %d row(s) affected' % rowcount)
                except:
                    printException()
                    sys.exit(3)
            else:
                logger.error('Will not delete hostames which have aliases, unless the --cascade flag is set')
                sys.exit(3)
        else:
            logger.error("No such hostname")
            sys.exit(3)


def remove_alias(target):
    logger = logging.getLogger("magdb")

    if target:
        h_list = target.split('.',1)
        if len(h_list) == 1:
            h_list.append(DEFAULT_DOMAIN)

        old_alias = session.query(tables["aliases"]).filter(tables["domains"].columns["id"] == tables["aliases"].columns["domainId"]).filter(tables["domains"].columns["domainName"]==h_list[1]).filter(tables["aliases"].columns["name"] == h_list[0]).first()

        if old_alias:
            try:
                delete_stmt = delete(tables["aliases"],tables["aliases"].columns["id"]==old_alias.id)
                session.execute(delete_stmt)
                session.commit()
                logger.info("Alias removed")
            except:
                printException()
                sys.exit(3)

        else:
            logger.error("No such alias")
            sys.exit(3)


def remove_ip(target, cascade):
    logger = logging.getLogger("magdb")

    try:
        old_host_address = session.query(tables["hostAddresses"]).filter(tables["hostAddresses"].columns["ipAddress"] == target).first()
    except:
        printException()
        sys.exit(3)

    if old_host_address:
        vn = session.query(view).filter(view.columns["ipAddress"] == target).all()
        logger.info("Removing %s" % vn)
        if not vn or (vn and cascade):
            try:
                delete_stmt = delete(tables["hostAddresses"],tables["hostAddresses"].columns["id"]==old_host_address.id)
                session.execute(delete_stmt)
                session.commit()
                logger.info('IPs removed')
            except:
                printException()
                sys.exit(3)
        else:
            logger.error('Will not delete IP addresses which have hostnames unless the --cascade flag is set')
            sys.exit(3)
    else:
        logger.error("No such IP address")
        sys.exit(3)


if __name__ == "__main__":

    global session
    global metadata
    global view
    global tables
    global hostnames

    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s', name="magdb")
    logger = logging.getLogger("magdb")

    user_name = getpass.getuser()
    if user_name.lower() == 'root':
        logger.error("This script may not be run as the root user")
        sys.exit(3)

    parser = argparse.ArgumentParser()
    parser.usage = """
    info    ip    <ip>
    info    host    <fqdn>
    add    ip    <ip> <mac>
    add    host    <fqdn> <ip>
    remove    ip    <ip> [--cascade]
    remove    host    <fqdn>
    update    ip    <current ip> <new ip>
    update    host    <current fqdn> <new fqdn>
    add    interface    <mac> <name> <system>
"""
    parser.description = """
    MagDB stores network information as a set of related objects:
        system -> network interfaces -> ip addresses -> hostnames -> aliases

    This tool allows you to administer the mapping between:
        interface (mac) and ip;
        ip and hostname;
        hostname and alias.
    """

    """
    info
        host <hostname>
        ip <ip address>

    remove
        host <hostname>
        alias <alias>
        ip <ip address>
        ip <ip address>
            Add --cascade to automatically delete dependent objects

    update
        ip <old ip> <new ip>

    add
        host <hostname> <ip address> - add new <hostname> to an existing <ip address>
        alias <alias> <hostname> - add new <alias> to an existing <hostname>
        ip <ip address> <mac address> - add new <ip address> to an existing <mac address>
        interface <mac> <name> <system> - add new interface <mac address> to a system
"""

    parser.add_argument('mode', choices=['info', 'add', 'remove', 'update'])
    parser.add_argument('context', choices=['host', 'ip', 'alias', 'interface', 'stub'])
    parser.add_argument("--cascade",action="store_true", dest="cascade", default=False ,help="Casacade deletion of attached objects (hostnames and/or aliases)")
    args = parser.parse_known_args()

    mode = args[0].mode
    context = args[0].context
    cascade = args[0].cascade
    params = args[1]

    (session, metadata, view, view_aliases) = setup()
    tables  = metadata.tables
    hostnames = Table('hostnames', metadata, autoload=True)

    parser = argparse.ArgumentParser()
    parser.add_argument('target')

    if mode == "info":
        params = parser.parse_args(params)

        if context == "host":
            info_host(params.target)
        elif context == "ip":
            info_ip(params.target)
        elif context == 'alias':
            info_alias(params.target)

    elif mode == "add":
        if context == 'interface':
            parser.add_argument('name')
            parser.add_argument('system')
            params = parser.parse_args(params)
            add_interface(params.target, params.name, params.system)

        else:
            parser.add_argument('connector')
            params = parser.parse_args(params)

            if context == "host":
                add_host(params.target, params.connector)
            elif context == "ip":
                add_ip(params.target, params.connector)
            elif context == 'alias':
                add_alias(params.target, params.connector)
            elif context == 'stub':
                add_stub(params.target, params.connector)

    elif mode == "remove":
        params = parser.parse_args(params)
        if context == "host":
            remove_host(params.target, cascade)
        elif context == "ip":
            remove_ip(params.target, cascade)
        elif context == 'alias':
            remove_alias(params.target)

    elif mode == "update":
        parser.add_argument('new')
        params = parser.parse_args(params)
        if context == "host":
            update_host(params.target, params.new)
        elif context == "ip":
            update_ip(params.target, params.new)
        elif context == 'alias':
            logger.error('Update aliases is not possible, remove the old one and add a new one')
